
import * as readline from 'readline';
import { Source } from './compresion/core/base';
import { Huffman, Fano, Shannon } from './compresion/estaticas/estaticas';
import { ASCII, MinASCII } from './compresion/estaticas/ASCII';
import { Arithmetic } from './compresion/dinamicas/aritmetico';
import { LZ, LZW } from './compresion/dinamicas/LZ';
import { AdaptiveHuffman } from './compresion/dinamicas/huffman';
import { Markov } from './compresion/markov';
import BurrowsWheelerTransform from './compresion/utils/burrowWheeler';
import SucesiveSymbolsEncoding from './compresion/estaticas/sucesiveSymbols';

// Interfaz para configuraci√≥n de readline
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Funci√≥n para hacer preguntas de forma promisificada
function question(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

// Funci√≥n para limpiar consola
function clearConsole() {
  console.clear();
}

// Funci√≥n para mostrar el men√∫ principal
function showMainMenu() {
  console.log('\n=== SISTEMA DE COMPRESI√ìN DE DATOS ===\n');
  console.log('1. M√©todos Est√°ticos');
  console.log('2. M√©todos Din√°micos');
  console.log('3. Cadenas de Markov');
  console.log('4. Transformaciones Auxiliares');
  console.log('5. Comparar M√©todos');
  console.log('6. An√°lisis de Fuente Independiente');
  console.log('0. Salir\n');
}

// Funci√≥n para mostrar m√©todos est√°ticos
function showStaticMethods() {
  console.log('\n=== M√âTODOS EST√ÅTICOS ===\n');
  console.log('1. Huffman');
  console.log('2. Fano');
  console.log('3. Shannon');
  console.log('4. ASCII M√≠nimo');
  console.log('5. ASCII Est√°ndar');
  console.log('6. Codificaci√≥n por S√≠mbolos Sucesivos (RLE)');
  console.log('0. Volver al men√∫ principal\n');
}

// Funci√≥n para mostrar m√©todos din√°micos
function showDynamicMethods() {
  console.log('\n=== M√âTODOS DIN√ÅMICOS ===\n');
  console.log('1. Huffman Adaptativo');
  console.log('2. Aritm√©tico');
  console.log('3. LZ (Lempel-Ziv)');
  console.log('4. LZW (Lempel-Ziv-Welch)');
  console.log('0. Volver al men√∫ principal\n');
}

// Funci√≥n para mostrar opciones de Markov
function showMarkovMethods() {
  console.log('\n=== CADENAS DE MARKOV ===\n');
  console.log('1. Markov + Huffman');
  console.log('2. Markov + Fano');
  console.log('3. Markov + Shannon');
  console.log('4. Matriz de Transici√≥n (Orden 1)');
  console.log('0. Volver al men√∫ principal\n');
}

// Funci√≥n para mostrar transformaciones auxiliares
function showTransformMethods() {
  console.log('\n=== TRANSFORMACIONES AUXILIARES ===\n');
  console.log('1. Burrows-Wheeler - Codificar');
  console.log('2. Burrows-Wheeler - Decodificar');
  console.log('0. Volver al men√∫ principal\n');
}

// Funci√≥n para obtener texto del usuario
async function getInputText(): Promise<string> {
  const text = await question('Ingrese el texto a comprimir: ');
  if (text.trim() === '') {
    console.log('‚ö†Ô∏è El texto no puede estar vac√≠o.');
    return await getInputText();
  }
  return text.trim();
}

// Funci√≥n para obtener par√°metros num√©ricos
async function getNumberInput(prompt: string, min: number = 1, max?: number): Promise<number> {
  const input = await question(prompt);
  const num = parseInt(input);
  
  if (isNaN(num) || num < min || (max !== undefined && num > max)) {
    console.log(`‚ö†Ô∏è Por favor ingrese un n√∫mero v√°lido entre ${min}${max ? ` y ${max}` : ' o mayor'}.`);
    return await getNumberInput(prompt, min, max);
  }
  
  return num;
}


// Funci√≥n para mostrar matriz de transici√≥n
function showTransitionMatrix(matrix: any, symbols: string[], frequencies: number[][], originalText: string) {
  console.log('\n=== MATRIZ DE TRANSICI√ìN ===');
  console.log(`Texto analizado: "${originalText}"`);
  console.log(`Orden de Markov: 1 (cada fila es t, cada columna es t+1)\n`);
  
  // Mostrar matriz de frecuencias
  console.log('üìä MATRIZ DE FRECUENCIAS:');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨' + '‚îÄ'.repeat(symbols.length * 8 + 1) + '‚îê');
  
  // Encabezado con s√≠mbolos de destino (t+1)
  let header = '‚îÇ  t\\t+1  ‚îÇ';
  symbols.forEach(symbol => {
    const displaySymbol = symbol === ' ' ? 'ESP' : symbol === '\n' ? '\\n' : symbol === '\t' ? '\\t' : symbol;
    header += `   ${displaySymbol.padEnd(3)}  ‚îÇ`;
  });
  console.log(header);
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº' + '‚îÄ'.repeat(symbols.length * 8 + 1) + '‚î§');
  
  // Filas con frecuencias
  symbols.forEach((rowSymbol, i) => {
    const displayRowSymbol = rowSymbol === ' ' ? 'ESP' : rowSymbol === '\n' ? '\\n' : rowSymbol === '\t' ? '\\t' : rowSymbol;
    let row = `‚îÇ    ${displayRowSymbol.padEnd(3)} ‚îÇ`;
    symbols.forEach((_, j) => {
      row += `   ${frequencies[i]![j]!.toString().padStart(3)}  ‚îÇ`;
    });
    console.log(row);
  });
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥' + '‚îÄ'.repeat(symbols.length * 8 + 1) + '‚îò');
  
  console.log('\nüéØ MATRIZ DE PROBABILIDADES:');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨' + '‚îÄ'.repeat(symbols.length * 12 + 1) + '‚îê');
  
  // Encabezado para probabilidades
  header = '‚îÇ  t\\t+1  ‚îÇ';
  symbols.forEach(symbol => {
    const displaySymbol = symbol === ' ' ? 'ESP' : symbol === '\n' ? '\\n' : symbol === '\t' ? '\\t' : symbol;
    header += `     ${displaySymbol.padEnd(6)}     ‚îÇ`;
  });
  console.log(header);
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº' + '‚îÄ'.repeat(symbols.length * 12 + 1) + '‚î§');
  
  // Filas con probabilidades
  symbols.forEach((rowSymbol, i) => {
    const displayRowSymbol = rowSymbol === ' ' ? 'ESP' : rowSymbol === '\n' ? '\\n' : rowSymbol === '\t' ? '\\t' : rowSymbol;
    let row = `‚îÇ    ${displayRowSymbol.padEnd(3)} ‚îÇ`;
    symbols.forEach((_, j) => {
      const prob = matrix[i]![j]!;
      const probDisplay = prob.valueOf() === 0 ? '0' : 
                         prob.denominator === 1 ? prob.numerator.toString() :
                         `${prob.numerator}/${prob.denominator}`;
      row += `  ${probDisplay.padStart(10)}  ‚îÇ`;
    });
    console.log(row);
  });
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥' + '‚îÄ'.repeat(symbols.length * 12 + 1) + '‚îò');
  
  // Mostrar estad√≠sticas adicionales
  console.log('\nüìà ESTAD√çSTICAS:');
  console.log(`Total de transiciones analizadas: ${originalText.length - 1}`);
  console.log(`S√≠mbolos √∫nicos encontrados: ${symbols.length}`);
  
  // Mostrar transiciones m√°s frecuentes
  let maxTransitions: Array<{from: string, to: string, count: number}> = [];
  symbols.forEach((fromSymbol, i) => {
    symbols.forEach((toSymbol, j) => {
      const count = frequencies[i]![j]!;
      if (count > 0) {
        maxTransitions.push({ from: fromSymbol, to: toSymbol, count });
      }
    });
  });
  
  maxTransitions.sort((a, b) => b.count - a.count);
  
  if (maxTransitions.length > 0) {
    console.log('\nüî• TRANSICIONES M√ÅS FRECUENTES:');
    maxTransitions.slice(0, 5).forEach((trans, index) => {
      const fromDisplay = trans.from === ' ' ? 'ESPACIO' : trans.from === '\n' ? '\\n' : trans.from === '\t' ? '\\t' : trans.from;
      const toDisplay = trans.to === ' ' ? 'ESPACIO' : trans.to === '\n' ? '\\n' : trans.to === '\t' ? '\\t' : trans.to;
      console.log(`${index + 1}. '${fromDisplay}' ‚Üí '${toDisplay}': ${trans.count} veces`);
    });
  }
}

// Funci√≥n para mostrar tabla de c√≥digos
function showCodeTable(codes: Record<string, string>, title: string = 'TABLA DE C√ìDIGOS') {
  console.log(`\n=== ${title} ===`);
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ   S√≠mbolo   ‚îÇ      C√≥digo      ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  
  // Ordenar s√≠mbolos para mejor visualizaci√≥n
  const sortedEntries = Object.entries(codes).sort(([a], [b]) => {
    // Primero letras, luego n√∫meros, luego s√≠mbolos especiales
    if (a.match(/[a-zA-Z]/) && !b.match(/[a-zA-Z]/)) return -1;
    if (!a.match(/[a-zA-Z]/) && b.match(/[a-zA-Z]/)) return 1;
    return a.localeCompare(b);
  });
  
  sortedEntries.forEach(([symbol, code]) => {
    const displaySymbol = symbol === ' ' ? 'ESPACIO' : symbol === '\n' ? '\\n' : symbol === '\t' ? '\\t' : symbol;
    console.log(`‚îÇ     '${displaySymbol.padEnd(3)}'     ‚îÇ  ${code.padEnd(14)}  ‚îÇ`);
  });
  
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  console.log(`Total de s√≠mbolos: ${Object.keys(codes).length}`);
}

// Funci√≥n para mostrar informaci√≥n de frecuencias
function showFrequencyTable(source: Source, originalText: string, title: string = 'FRECUENCIAS Y PROBABILIDADES') {
  console.log(`\n=== ${title} ===`);
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ   S√≠mbolo   ‚îÇ Frecuencia  ‚îÇ   Probabilidad   ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  
  // Ordenar por probabilidad descendente
  const sortedEntries = Object.entries(source.probabilities)
    .sort(([,a], [,b]) => b.subtract(a).valueOf());
  
  const totalLength = originalText.length;
  
  sortedEntries.forEach(([symbol, prob]) => {
    const displaySymbol = symbol === ' ' ? 'ESPACIO' : symbol === '\n' ? '\\n' : symbol === '\t' ? '\\t' : symbol;
    // Calcular frecuencia real sin simplificar
    const count = originalText.split(symbol).length - 1;
    const frequency = `${count}/${totalLength}`;
    const percentage = (prob.valueOf() * 100).toFixed(2) + '%';
    console.log(`‚îÇ     '${displaySymbol.padEnd(3)}'     ‚îÇ  ${frequency.padEnd(9)}  ‚îÇ  ${percentage.padStart(14)}  ‚îÇ`);
  });
  
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
  console.log(`Entrop√≠a: ${source.entropy().toFraction()} (${source.entropy().valueOf().toFixed(4)} bits)`);
}

// Funci√≥n para mostrar resultados (versi√≥n mejorada)
function showResults(method: string, original: string, encoded: any, decoded?: string, codeTable?: Record<string, string>, source?: Source) {
  console.log('\n' + '='.repeat(60));
  console.log(`=== RESULTADOS - ${method.toUpperCase()} ===`);
  console.log('='.repeat(60));
  
  // Mostrar informaci√≥n b√°sica
  console.log(`\nüìù INFORMACI√ìN B√ÅSICA:`);
  console.log(`Texto original: "${original}"`);
  console.log(`Tama√±o original: ${original.length} caracteres (${original.length * 8} bits)`);
  
  // Mostrar tabla de frecuencias si hay source
  if (source) {
    showFrequencyTable(source, original);
  }
  
  // Mostrar tabla de c√≥digos si est√° disponible
  if (codeTable) {
    showCodeTable(codeTable);
  }
  
  // Mostrar resultados de codificaci√≥n
  console.log(`\nüîß RESULTADOS DE CODIFICACI√ìN:`);
  if (typeof encoded === 'string') {
    console.log(`Texto codificado: "${encoded}"`);
    console.log(`Tama√±o codificado: ${encoded.length} bits`);
    console.log(`Ratio de compresi√≥n: ${((original.length * 8) / encoded.length).toFixed(2)}:1`);
    console.log(`Porcentaje de compresi√≥n: ${(((original.length * 8 - encoded.length) / (original.length * 8)) * 100).toFixed(2)}%`);
    
    // Mostrar eficiencia por s√≠mbolo
    const avgBitsPerSymbol = encoded.length / original.length;
    console.log(`Promedio de bits por s√≠mbolo: ${avgBitsPerSymbol.toFixed(6)} bits`);
  } else {
    console.log(`Resultado codificado:`, encoded);
  }
  
  // Mostrar verificaci√≥n de decodificaci√≥n
  if (decoded) {
    console.log(`\n‚úÖ VERIFICACI√ìN:`);
    console.log(`Texto decodificado: "${decoded}"`);
    console.log(`Estado: ${original === decoded ? '‚úÖ EXITOSA' : '‚ùå FALLIDA'}`);
    
    if (original !== decoded) {
      console.log(`‚ö†Ô∏è Error de decodificaci√≥n detectado!`);
    }
  }
  
  console.log('\n' + '='.repeat(60));
}

// Funci√≥n para manejar m√©todos est√°ticos
async function handleStaticMethods() {
  while (true) {
    clearConsole();
    showStaticMethods();
    
    const choice = await question('Seleccione una opci√≥n: ');
    
    switch (choice) {
      case '1': // Huffman
        try {
          const text = await getInputText();
          const source = Source.fromString(text);
          const huffman = new Huffman(source);
          const encoded = huffman.encode(text);
          const decoded = huffman.decode(encoded);
          
          
          showResults('Huffman', text, encoded, decoded, huffman.codes, source);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '2': // Fano
        try {
          const text = await getInputText();
          const source = Source.fromString(text);
          const fano = new Fano(source);
          const encoded = fano.encode(text);
          const decoded = fano.decode(encoded);
          
          
          showResults('Fano', text, encoded, decoded, fano.codes, source);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '3': // Shannon
        try {
          const text = await getInputText();
          const source = Source.fromString(text);
          const shannon = new Shannon(source);
          const encoded = shannon.encode(text);
          const decoded = shannon.decode(encoded);
          
          
          showResults('Shannon', text, encoded, decoded, shannon.codes, source);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '4': // ASCII M√≠nimo
        try {
          const text = await getInputText();
          const minAscii = MinASCII.fromString(text);
          const encoded = minAscii.encode(text);
          const decoded = minAscii.decode(encoded);
          showResults('ASCII M√≠nimo', text, encoded, decoded, minAscii.codes, minAscii.source);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '5': // ASCII Est√°ndar
        try {
          const text = await getInputText();
          const encoded = ASCII.encode(text);
          const decoded = ASCII.decode(encoded);
          
          // Crear tabla de c√≥digos ASCII para mostrar
          const asciiCodes: Record<string, string> = {};
          for (const char of text) {
            if (!asciiCodes[char]) {
              asciiCodes[char] = char.charCodeAt(0).toString(2).padStart(8, '0');
            }
          }
          
          showResults('ASCII Est√°ndar', text, encoded, decoded, asciiCodes);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '6': // RLE
        try {
          const text = await getInputText();
          const ascii = (str: string) => str.charCodeAt(0);
          const [encoded, charBits, countBits] = SucesiveSymbolsEncoding.encode(text, ascii);
          const decoded = SucesiveSymbolsEncoding.decode(encoded, charBits, countBits);
          console.log('\n=== RESULTADOS RLE ===');
          console.log(`Texto original: "${text}"`);
          console.log(`Texto codificado: "${encoded}"`);
          console.log(`Bits por car√°cter: ${charBits}`);
          console.log(`Bits por conteo: ${countBits}`);
          console.log(`Texto decodificado: "${decoded}"`);
          console.log(`‚úÖ Decodificaci√≥n ${text === decoded ? 'exitosa' : 'fallida'}`);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '0':
        return;
        
      default:
        console.log('‚ùå Opci√≥n no v√°lida.');
    }
    
    await question('\nPresione Enter para continuar...');
  }
}

// Funci√≥n para manejar m√©todos din√°micos
async function handleDynamicMethods() {
  while (true) {
    clearConsole();
    showDynamicMethods();
    
    const choice = await question('Seleccione una opci√≥n: ');
    
    switch (choice) {
      case '1': // Huffman Adaptativo
        try {
          const text = await getInputText();
          const source = Source.fromString(text);
          
          // Preguntar si quiere ver el proceso paso a paso
          const interactive = await question('¬øDesea ver el proceso de construcci√≥n paso a paso? (s/n): ');
          const isInteractive = interactive.toLowerCase() === 's';
          
          const adaptiveHuffman = new AdaptiveHuffman(undefined, undefined, isInteractive, question);
          
          if (isInteractive) {
            console.log('\nüîÑ Iniciando codificaci√≥n con Huffman Adaptativo (modo paso a paso)...\n');
            console.log('üí° Se mostrar√° autom√°ticamente cada iteraci√≥n con una pausa de 1.5 segundos entre pasos.\n');
          } else {
            console.log('\nüîÑ Iniciando codificaci√≥n con Huffman Adaptativo...\n');
          }
          
          let encoded: string;
          if (isInteractive) {
            encoded = await adaptiveHuffman.encode(text);
          } else {
            encoded = adaptiveHuffman.encodeSync(text);
          }
          
          const decoded = adaptiveHuffman.decode(encoded);
          const codes = adaptiveHuffman.getCodes();
          
          if (!isInteractive) {
            showResults('Huffman Adaptativo', text, encoded, decoded, codes, source);
          }
          
          // Opci√≥n para mostrar el √°rbol final
          const showTree = await question('\n¬øDesea ver el √°rbol final de Huffman? (s/n): ');
          if (showTree.toLowerCase() === 's') {
            adaptiveHuffman.printTree();
          }
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '2': // Aritm√©tico
        try {
          const text = await getInputText();
          const source = Source.fromString(text);
          const arithmetic = new Arithmetic(source);
          const encoded = arithmetic.encode(text);
          const decoded = arithmetic.decode(encoded);
          showResults('Aritm√©tico', text, encoded, decoded);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '3': // LZ
        try {
          const text = await getInputText();
          const windowSize = await getNumberInput('Ingrese el tama√±o de ventana (potencia de 2, ej: 8, 16, 32): ');
          
          // Verificar que sea potencia de 2
          if ((windowSize & (windowSize - 1)) !== 0) {
            console.log('‚ùå El tama√±o de ventana debe ser una potencia de 2.');
            break;
          }
          
          const lz = new LZ(windowSize);
          const encoded = lz.encode(text);
          const decoded = lz.decode(encoded);
          showResults(`LZ (ventana: ${windowSize})`, text, encoded, decoded);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '4': // LZW
        try {
          const text = await getInputText();
          const windowSize = await getNumberInput('Ingrese el tama√±o de ventana (potencia de 2, ej: 8, 16, 32): ');
          
          if ((windowSize & (windowSize - 1)) !== 0) {
            console.log('‚ùå El tama√±o de ventana debe ser una potencia de 2.');
            break;
          }
          
          const lzw = new LZW(windowSize);
          const encoded = lzw.encode(text);
          const decoded = lzw.decode(encoded);
          console.log('\n=== RESULTADOS LZW ===');
          console.log(`Texto original: "${text}"`);
          console.log(`Tama√±o original: ${text.length * 8} bits`);
          console.log(`Texto codificado: "${encoded}"`);
          console.log(`Tama√±o codificado: ${encoded.length * 8} bits (cada car√°cter representa un c√≥digo)`);
          console.log(`Texto decodificado: "${decoded}"`);
          console.log(`‚úÖ Decodificaci√≥n ${text === decoded ? 'exitosa' : 'fallida'}`);
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '0':
        return;
        
      default:
        console.log('‚ùå Opci√≥n no v√°lida.');
    }
    
    await question('\nPresione Enter para continuar...');
  }
}

// Funci√≥n para manejar m√©todos de Markov
async function handleMarkovMethods() {
  while (true) {
    clearConsole();
    showMarkovMethods();
    
    const choice = await question('Seleccione una opci√≥n: ');
    
    if (choice === '0') return;
    
    if (['1', '2', '3', '4'].includes(choice)) {
      try {
        if (choice === '4') {
          // Opci√≥n para mostrar matriz de transici√≥n
          const text = await getInputText();
          
          // Crear instancia de Markov con orden 1 (solo para obtener la matriz)
          const markov = new Markov(text, 1, Huffman);
          const transitionData = markov.getTransitionMatrix(text);
          
          showTransitionMatrix(
            transitionData.matrix, 
            transitionData.symbols, 
            transitionData.frequencies, 
            text
          );
          
        } else {
          // Opciones existentes de compresi√≥n con Markov
          const text = await getInputText();
          const order = await getNumberInput('Ingrese el orden de Markov (1, 2, 3, etc.): ');
          
          let markov: any;
          let methodName = '';
          
          switch (choice) {
            case '1':
              markov = new Markov(text, order, Huffman);
              methodName = `Markov (orden ${order}) + Huffman`;
              break;
            case '2':
              markov = new Markov(text, order, Fano);
              methodName = `Markov (orden ${order}) + Fano`;
              break;
            case '3':
              markov = new Markov(text, order, Shannon);
              methodName = `Markov (orden ${order}) + Shannon`;
              break;
          }
          
          const encoded = markov.encode(text);
          const decoded = markov.decode(encoded);
          showResults(methodName, text, encoded, decoded);
        }
        
      } catch (error) {
        console.log(`‚ùå Error: ${(error as Error).message}`);
      }
    } else {
      console.log('‚ùå Opci√≥n no v√°lida.');
    }
    
    await question('\nPresione Enter para continuar...');
  }
}

// Funci√≥n para manejar transformaciones auxiliares
async function handleTransformMethods() {
  while (true) {
    clearConsole();
    showTransformMethods();
    
    const choice = await question('Seleccione una opci√≥n: ');
    
    switch (choice) {
      case '1': // Burrows-Wheeler Codificar
        try {
          const text = await getInputText();
          const indicator = '$'; // Indicador por defecto
          
          console.log('\n=== CODIFICACI√ìN BURROWS-WHEELER ===');
          console.log(`Texto original: "${text}"`);
          const encoded = BurrowsWheelerTransform.encode(text, indicator);
          console.log(`\n‚úÖ Texto transformado: "${encoded}"`);
          
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '2': // Burrows-Wheeler Decodificar
        try {
          const encodedText = await question('Ingrese el texto codificado con Burrows-Wheeler: ');
          if (encodedText.trim() === '') {
            console.log('‚ö†Ô∏è El texto no puede estar vac√≠o.');
            break;
          }
          
          const indicator = '$'; // Indicador por defecto
          
          console.log('\n=== DECODIFICACI√ìN BURROWS-WHEELER ===');
          console.log(`Texto codificado: "${encodedText}"`);
          const decoded = BurrowsWheelerTransform.decodeStepByStep(encodedText, indicator);
          console.log(`\n‚úÖ Texto original recuperado: "${decoded}"`);
          
        } catch (error) {
          console.log(`‚ùå Error: ${(error as Error).message}`);
        }
        break;
        
      case '0':
        return;
        
      default:
        console.log('‚ùå Opci√≥n no v√°lida.');
    }
    
    await question('\nPresione Enter para continuar...');
  }
}

// Funci√≥n para comparar m√©todos
async function handleComparisonMethods() {
  console.log('\n=== COMPARACI√ìN DE M√âTODOS ===\n');
  
  try {
    const text = await getInputText();
    const source = Source.fromString(text);
    
    console.log('\nüìä Comparando m√©todos de compresi√≥n...\n');
    console.log(`Texto original: "${text}"`);
    console.log(`Tama√±o original: ${text.length} caracteres (${text.length * 8} bits)\n`);
    
    const results: Array<{method: string, size: number, ratio: number}> = [];
    
    // M√©todos est√°ticos
    try {
      const huffman = new Huffman(source);
      const huffmanEncoded = huffman.encode(text);
      results.push({
        method: 'Huffman',
        size: huffmanEncoded.length,
        ratio: (text.length * 8) / huffmanEncoded.length
      });
    } catch (e) { /* ignorar errores */ }
    
    try {
      const fano = new Fano(source);
      const fanoEncoded = fano.encode(text);
      results.push({
        method: 'Fano',
        size: fanoEncoded.length,
        ratio: (text.length * 8) / fanoEncoded.length
      });
    } catch (e) { /* ignorar errores */ }
    
    try {
      const shannon = new Shannon(source);
      const shannonEncoded = shannon.encode(text);
      results.push({
        method: 'Shannon',
        size: shannonEncoded.length,
        ratio: (text.length * 8) / shannonEncoded.length
      });
    } catch (e) { /* ignorar errores */ }
    
    try {
      const minAscii = MinASCII.fromString(text);
      const minAsciiEncoded = minAscii.encode(text);
      results.push({
        method: 'ASCII M√≠nimo',
        size: minAsciiEncoded.length,
        ratio: (text.length * 8) / minAsciiEncoded.length
      });
    } catch (e) { /* ignorar errores */ }
    
    try {
      const asciiEncoded = ASCII.encode(text);
      results.push({
        method: 'ASCII Est√°ndar',
        size: asciiEncoded.length,
        ratio: (text.length * 8) / asciiEncoded.length
      });
    } catch (e) { /* ignorar errores */ }
    
    // M√©todos din√°micos
    try {
      const adaptiveHuffman = new AdaptiveHuffman();
      const adaptiveEncoded = adaptiveHuffman.encodeSync(text);
      results.push({
        method: 'Huffman Adaptativo',
        size: adaptiveEncoded.length,
        ratio: (text.length * 8) / adaptiveEncoded.length
      });
    } catch (e) { /* ignorar errores */ }
    
    // M√©todo aritm√©tico
    try {
      const arithmetic = new Arithmetic(source);
      const arithmeticEncoded = arithmetic.encode(text);
      results.push({
        method: 'Aritm√©tico',
        size: arithmeticEncoded.toString().length * 8, // Aproximaci√≥n
        ratio: (text.length * 8) / (arithmeticEncoded.toString().length * 8)
      });
    } catch (e) { /* ignorar errores */ }
    
    // Ordenar por ratio de compresi√≥n
    results.sort((a, b) => b.ratio - a.ratio);
    
    console.log('üèÜ RESULTADOS (ordenados por eficiencia):');
    console.log('‚îÄ'.repeat(60));
    console.log('| M√©todo          | Tama√±o (bits) | Ratio | Eficiencia |');
    console.log('‚îÄ'.repeat(60));
    
    results.forEach((result, index) => {
      const efficiency = (((text.length * 8 - result.size) / (text.length * 8)) * 100).toFixed(1);
      const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : '  ';
      console.log(`| ${medal} ${result.method.padEnd(12)} | ${result.size.toString().padStart(11)} | ${result.ratio.toFixed(2).padStart(5)} | ${efficiency.padStart(8)}% |`);
    });
    
    console.log('‚îÄ'.repeat(60));
    
  } catch (error) {
    console.log(`‚ùå Error: ${(error as Error).message}`);
  }
  
  await question('\nPresione Enter para continuar...');
}

// Funci√≥n para manejar el an√°lisis de fuente independiente
async function handleSourceAnalysis() {
  console.log('\n=== AN√ÅLISIS DE FUENTE INDEPENDIENTE ===\n');
  
  try {
    const text = await getInputText();
    const source = Source.fromString(text);
    
    console.log('\nüìä Analizando propiedades de la fuente...\n');
    console.log(`Texto analizado: "${text}"`);
    console.log(`Tama√±o: ${text.length} caracteres\n`);
    
    // Mostrar tabla de frecuencias
    console.log('üìà TABLA DE FRECUENCIAS:');
    console.log('‚îÄ'.repeat(50));
    console.log('| S√≠mbolo | Frecuencia | Probabilidad |');
    console.log('‚îÄ'.repeat(50));
    
    const symbols = source.symbols;
    const totalChars = text.length;
    
    for (const symbol of symbols) {
      const prob = source.probabilities[symbol]!;
      const frequency = Math.round(prob.valueOf() * totalChars);
      const displaySymbol = symbol === ' ' ? 'ESPACIO' : 
                           symbol === '\n' ? '\\n' : 
                           symbol === '\t' ? '\\t' : 
                           symbol;
      
      console.log(`| ${displaySymbol.padEnd(7)} | ${frequency.toString().padStart(10)} | ${prob.valueOf().toFixed(4).padStart(12)} |`);
    }
    console.log('‚îÄ'.repeat(50));
    
    // Calcular m√©tricas
    const entropy = source.entropy().valueOf();
    const maxEntropy = Math.log2(symbols.length);
    const efficiency = entropy / maxEntropy;
    const redundancy = 1 - efficiency;
    
    console.log('\nüîç M√âTRICAS DE LA FUENTE:');
    console.log('‚îÄ'.repeat(50));
    console.log(`üìè Entrop√≠a (H): ${entropy.toFixed(4)} bits/s√≠mbolo`);
    console.log(`üìè Entrop√≠a m√°xima: ${maxEntropy.toFixed(4)} bits/s√≠mbolo`);
    console.log(`üìè Eficiencia (Œ∑): ${efficiency.toFixed(4)} (${(efficiency * 100).toFixed(2)}%)`);
    console.log(`üìè Redundancia (R): ${redundancy.toFixed(4)} (${(redundancy * 100).toFixed(2)}%)`);
    console.log(`üìè Redundancia absoluta: ${(redundancy * maxEntropy).toFixed(4)} bits/s√≠mbolo`);
    console.log('‚îÄ'.repeat(50));
    
    console.log('\nüìö INTERPRETACI√ìN:');
    if (efficiency > 0.9) {
      console.log('‚úÖ La fuente es muy eficiente (baja redundancia)');
    } else if (efficiency > 0.7) {
      console.log('‚ö†Ô∏è  La fuente tiene eficiencia moderada');
    } else {
      console.log('‚ùå La fuente tiene alta redundancia (baja eficiencia)');
    }
    
    console.log(`üí° La fuente utiliza ${(efficiency * 100).toFixed(1)}% de su capacidad m√°xima de informaci√≥n`);
    console.log(`üí° La redundancia es del ${(redundancy * 100).toFixed(1)}%`);
    
    if (redundancy > 0.1) {
      const bitsSaved = redundancy * maxEntropy;
      console.log(`üí° Se podr√≠an ahorrar aproximadamente ${bitsSaved.toFixed(2)} bits por s√≠mbolo con compresi√≥n √≥ptima`);
    }
    
  } catch (error) {
    console.log(`‚ùå Error: ${(error as Error).message}`);
  }
  
  await question('\nPresione Enter para continuar...');
}

// Funci√≥n principal
async function main() {
  console.log('üöÄ Iniciando Sistema de Compresi√≥n de Datos...');
  
  while (true) {
    clearConsole();
    showMainMenu();
    
    const choice = await question('Seleccione una opci√≥n: ');
    
    switch (choice) {
      case '1':
        await handleStaticMethods();
        break;
        
      case '2':
        await handleDynamicMethods();
        break;
        
      case '3':
        await handleMarkovMethods();
        break;
        
      case '4':
        await handleTransformMethods();
        break;
        
      case '5':
        await handleComparisonMethods();
        break;
        
      case '6':
        await handleSourceAnalysis();
        break;
        
      case '0':
        console.log('\nüëã ¬°Gracias por usar el Sistema de Compresi√≥n de Datos!');
        rl.close();
        process.exit(0);
        
      default:
        console.log('‚ùå Opci√≥n no v√°lida. Por favor seleccione una opci√≥n del men√∫.');
        await question('Presione Enter para continuar...');
    }
  }
}

// Manejo de errores globales
process.on('unhandledRejection', (error) => {
  console.error('‚ùå Error no manejado:', error);
  rl.close();
  process.exit(1);
});

process.on('SIGINT', () => {
  console.log('\n\nüëã Programa interrumpido por el usuario.');
  rl.close();
  process.exit(0);
});

// Ejecutar programa principal
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Error fatal:', error);
    rl.close();
    process.exit(1);
  });
}