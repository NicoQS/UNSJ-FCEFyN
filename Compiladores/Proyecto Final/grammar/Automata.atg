COMPILER Automata

/*
  Compilador para definir Autómatas Finitos Deterministas
  Lenguaje simple e intuitivo para usuarios no expertos
  Con validación obligatoria de secciones y tabla de símbolos
*/

	public TablaSimbolos tab;
	public AutomataBuilder builder;

CHARACTERS
  letter = 'A'..'Z' + 'a'..'z' + '_'.
  digit  = '0'..'9'.
  cr     = '\r'.
  lf     = '\n'.
  tab    = '\t'.
  stringChar = ANY - '"' - '\\' - cr - lf.
  singleStringChar = ANY - '\'' - '\\' - cr - lf.

TOKENS
  ident  = letter {letter | digit}.
  string = '"' {stringChar | '\\' '"'} '"' | '\'' {singleStringChar | '\\' '\''} '\''.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

Automata = (. tab = new TablaSimbolos(); 
            builder = new AutomataBuilder(); .)
  "AUTOMATA" 
  ident (. string nombreAutomata = t.val; 
            builder.IniciarAutomata(nombreAutomata); .)
  
  "ALFABETO" ":" 
  ListaSimbolos (. .)
  
  "ESTADOS" ":" 
  ListaEstados (. .)

  "INICIAL" ":" 
  ident (. builder.DefinirEstadoInicial(t.val); .)
  
  [ "FINALES" ":" 
    ListaEstadosFinales (. .)
  ]
  
  "TRANSICIONES" ":"
  {Transicion} (. if (!builder.TieneTransiciones()) {
                      SemErr("ERROR: El autómata debe tener al menos una transición."); 
                  } .)
  
  "FIN" (. if (errors.count == 0) {
                builder.FinalizarConValidacion(); 
            } else {
                builder.FinalizarSinVisualizacion();
            } .)
.

ListaSimbolos =
  string (. string simbolo1 = t.val.Trim('"', '\'');
    	tab.AgregarSimbolo(simbolo1);
    	builder.AgregarSimbolo(simbolo1); .)
  { "," 
    string (. string simbolo2 = t.val.Trim('"', '\''); 
        tab.AgregarSimbolo(simbolo2);
        builder.AgregarSimbolo(simbolo2); .)
  }
.

ListaEstados =
  ident (. if (tab.EstadoExiste(t.val)) {
              SemErr("ERROR: Estado duplicado: " + t.val);
           } else {
              tab.AgregarEstado(t.val);
              builder.AgregarEstado(t.val);
           } .)
  { "," 
    ident (. if (tab.EstadoExiste(t.val)) {
                SemErr("ERROR: Estado duplicado: " + t.val);
             } else {
                tab.AgregarEstado(t.val);
                builder.AgregarEstado(t.val);
             } .)
  }
.

ListaEstadosFinales =
  ident (. if (!tab.EstadoExiste(t.val)) {
              SemErr("ERROR: Estado final no declarado: " + t.val);
           } else {
              builder.MarcarEstadoFinal(t.val);
           } .)
  { "," 
    ident (. if (!tab.EstadoExiste(t.val)) {
                SemErr("ERROR: Estado final no declarado: " + t.val);
             } else {
                builder.MarcarEstadoFinal(t.val);
             } .)
  }
.

Transicion =
  ident (. string estadoOrigen = t.val; 
           if (!tab.EstadoExiste(estadoOrigen)) {
              SemErr("ERROR: Estado origen no declarado: " + estadoOrigen);
           } .)
  ( "->" | "→" ) (. .)
  ident (. string estadoDestino = t.val; 
           if (!tab.EstadoExiste(estadoDestino)) {
              SemErr("ERROR: Estado destino no declarado: " + estadoDestino);
           } .)
  ( "con" | "mediante" | "usando" ) (. .)
  string (. string simboloTrans = t.val.Trim('"', '\''); 
        string clave = estadoOrigen + "-" + simboloTrans;
        if (tab.EstadoExiste(estadoOrigen) && tab.EstadoExiste(estadoDestino)) {
            if (tab.TransicionExiste(clave)) {
                SemErr("ERROR: Transicion duplicada desde " + estadoOrigen + " con simbolo '" + simboloTrans + "'");
            } else {
                tab.AgregarTransicion(clave, estadoDestino);
                builder.AgregarTransicion(estadoOrigen, estadoDestino, simboloTrans);
            }
        } .)
  { "," 
    string (. string simboloTrans2 = t.val.Trim('"', '\''); 
        string clave2 = estadoOrigen + "-" + simboloTrans2;
        if (tab.EstadoExiste(estadoOrigen) && tab.EstadoExiste(estadoDestino)) {
            if (tab.TransicionExiste(clave2)) {
                SemErr("ERROR: Transicion duplicada desde " + estadoOrigen + " con simbolo '" + simboloTrans2 + "'");
            } else {
                tab.AgregarTransicion(clave2, estadoDestino);
                builder.AgregarTransicion(estadoOrigen, estadoDestino, simboloTrans2);
            }
        } .)
  }
.

END Automata.